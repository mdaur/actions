on: 
  workflow_call:
    inputs:
      # e.g. cr.daur-online.de/mdaur/build-container
      container-name:
        required: true
        type: string
      container-labels:
        required: true
        type: string        
      # e.g. linux/amd64,linux/arm64
      platforms:
        required: true
        type: string

jobs:
  BuildContainer:
    runs-on: ["docker"]

    container:
        # forgejo reference image with limitations e.g. docker cli missing
        #image: node:21-bullseye
        image: cr.daur-online.de/mdaur/build-container:v0.0.11
        credentials:
          username: ${{ secrets.REGISTRY_MDAUR_USER }}
          password: ${{ secrets.REGISTRY_MDAUR_PASSWORD }}
    steps:
      - name: Checkout
        uses: https://github.com/actions/checkout@v4

      - name: Set up Docker Buildx (per architecture remote buildkit instance)
        id: setupBuilder
        uses: docker/setup-buildx-action@v3
        with:
          # ---
          # remote                -> self manager buildkit refered via endpoint(s)
          driver: remote
          # driver-opts: |
          #   key=KEY
          #   cert=CERT
          #   cacert=CACERT
          #   servername=SERVER
          # ---
          # docker-container      -> action managed buildkit container
          # driver: docker-container
          # driver-opts: |
          #   network=bridge
          endpoint: "tcp://bk.buildkit-amd64.svc.f24-10-int.daur-online.de:1234"
          platforms: linux/amd64
          append: |
            - endpoint: tcp://bk.buildkit-arm64.svc.f24-10-int.daur-online.de:1234
              platforms: linux/arm64,linux/arm/v7
        env:
          # DOCKER_CERT_PATH: "/container/tls"
          # DOCKER_TLS_VERIFY: "true"
          # DOCKER_TLS: "true"
          # used for diver: remote # this means maintaining buildkit from scratch
          BUILDER_NODE_0_AUTH_TLS_CACERT: ${{ secrets.DIND_CA }}
          BUILDER_NODE_0_AUTH_TLS_CERT: ${{ secrets.DIND_CERT }}
          BUILDER_NODE_0_AUTH_TLS_KEY: ${{ secrets.DIND_KEY }}
          BUILDER_NODE_1_AUTH_TLS_CACERT: ${{ secrets.DIND_CA }}
          BUILDER_NODE_1_AUTH_TLS_CERT: ${{ secrets.DIND_CERT }}
          BUILDER_NODE_1_AUTH_TLS_KEY: ${{ secrets.DIND_KEY }}

      - name: Container Meta Data
        id: meta
        uses: https://github.com/docker/metadata-action@v4
        with:
          images: ${{ inputs.container-name }}
          tags: |
            type=sha,prefix=
            type=raw,value=nightly,enable=${{ env.GITHUB_REF_NAME == 'main' }}
            type=raw,value=${{ github.ref_name }},enable=${{ env.GITHUB_REF_TYPE == 'tag' }}
            type=raw,value=latest,enable=${{ env.GITHUB_EVENT_NAME == 'release' }}
          labels: |
            ${{ inputs.container-labels }}

      - name: Login to Registry
        # run: |
        #   [ ! -d $HOME/.docker ] && mkdir $HOME/.docker
        #   echo "${{ secrets.REGISTRY_MDAUR }}" > $HOME/.docker/config.json
        #   cat $HOME/.docker/config.json
        uses: https://github.com/docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_MDAUR_URL }}
          username: ${{ secrets.REGISTRY_MDAUR_USER }}
          password: ${{ secrets.REGISTRY_MDAUR_PASSWORD }}

      - name: Build Multi Arch Container Image
        uses: https://github.com/docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          #load: true     # requires docker socket/ config
          pull: true
          push: true
          # setting platforms will automatically select builder defined 
          # in step setupBuilder per architecture and build multi-arch image
          platforms: ${{ inputs.platforms }}
          tags: ${{ steps.meta.outputs.tags }}
          # bridge not supported by buildkit
          #network: bridge
          #outputs: type=docker,dest=/tmp/myimage.tar
          #endpoint:
